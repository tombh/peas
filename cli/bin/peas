#!/usr/bin/env ruby
require 'gli'

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), "../"))
require 'lib/peas'

@api = API.new

include GLI::App
reset # Used when this file is repetitively loaded by rspec

program_desc 'CLI client for Peas'

version Peas::VERSION

desc 'Create an app'
command :create do |c|
  c.action do |global_options, options, args|
    @api.request :post, :create, {
      first_sha: Git.first_sha,
      remote: Git.remote
    }
  end
end

desc 'Deploy an app'
command :deploy do |c|
  c.action do |global_options, options, args|
    @api.request :get, :deploy, {first_sha: Git.first_sha}
  end
end

desc 'Scale an app'
long_desc <<-EOF
For example: peas scale web=3 worker=2
EOF
command :scale do |c|
  c.action do |global_options, options, args|
    if args.length == 0
      exit_now! "Please provide scaling arguments in the form: web=3 worker=2"
    end
    scaling_hash = {}
    args.each do |arg|
      parts = arg.split('=')
      process_type = parts[0]
      quantity = parts[1]
      scaling_hash[process_type] = quantity
    end
    @api.request :put, :scale, {
      first_sha: Git.first_sha,
      scaling_hash: scaling_hash.to_json
    }
  end
end

desc 'Set Peas global settings'
command :settings do |c|
  c.flag 'domain',
    type: String,
    desc: 'The FQDN for the Peas server'
  c.action do |global_options, options, args|
    if options['domain']
      if !options['domain'].start_with? 'http://'
        options['domain'] = "http://#{options['domain']}"
      end
    end
    # Gli seems to provide a String and Symbol key for every option, so the options hash needs
    # de-duplicating
    deduped = {}
    options.each do |k, v|
      deduped[k] = v if k.is_a? String
    end
    # Merge existing settings with current settings
    content = Peas.config.merge(deduped).to_json
    File.open(Peas.config_file, 'w+'){|f| f.write(content) }
    # Save the settings on the server as well
    @api = API.new # Refresh settings from file
    @api.request :put, :settings, options
    puts "New settings:"
    puts JSON.pretty_generate(Peas.config)
  end
  desc 'Display the current settings'
  c.command :display do |c|
    c.action do |global_options, options, args|
      puts JSON.pretty_generate(Peas.config)
    end
  end
end

pre do |global, command, options, args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Show a custom error message with backtrace if it's not a GLI error
  if exception.class.to_s.split('::').first != 'GLI'
    puts "Unexpected error: #{exception.class}".color(:red)
    puts "#{exception.message} @ #{exception.backtrace.last}".color(:red)
  end
  # GLI needs this to do its default error reporting things
  true
end

exit_status = run(ARGV)
exit exit_status if ENV['GLI_ENV'] != 'test'
